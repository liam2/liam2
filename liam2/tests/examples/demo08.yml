# This is a LIAM2 simulation file.

# In this example, we will model the work state and education level of people.

# To achieve that we demonstrate using the logit_score() and align() functions 
# as a more versatile alternative to the logit_regr() function.

# To run the simulation, press F6 if you are using the editor bundled with
# LIAM2, otherwise run the following command in a console: 
# [BUNDLEPATH]\liam2\main run demo08.yml
globals:
    periodic:
        - RETIREMENTAGE: int

entities:
    household:
        links:
            persons: {type: one2many, target: person, field: hh_id}

        processes:
            csv_output:
                - csv(period,
                      avg(persons.count()),
                      avg(persons.count(age < 18)),
                      fname='hh_size.csv', mode='a')

            init_reports:
                - csv('period', 'N persons', 'N children',
                      fname='hh_size.csv')
                      
            clean_empty:
                - empty: persons.count() == 0
                - show('Number of empty households:', count(empty))
                - remove(empty)

    person:
        fields:
            # period and id are implicit
            - age:        int
            - gender:     bool
            # 1: in work, 2: unemployed including old-age unemployed,
            # 3: in education, 4: retired, 5: other inactive
            - workstate:  int
            # 1: single, 2: married, 3: divorced, 4: widowed
            - civilstate: int
            - dur_in_couple: int

            # link fields
            - mother_id:  int
            - partner_id: int
            - hh_id:      int

            # fields not present in input
            - agegroup_work: {type: int, initialdata: False}
            - agegroup_civilstate: {type: int, initialdata: False}
            - education_level: {type: int, initialdata: False}

        links:
            mother: {type: many2one, target: person, field: mother_id}
            partner: {type: many2one, target: person, field: partner_id}
            household: {type: many2one, target: household, field: hh_id}
            children: {type: one2many, target: person, field: mother_id}

        macros:
            UNSET: -1

            MALE: True
            FEMALE: False
            ISMALE: gender
            ISFEMALE: not gender

            ACTIVEAGE: (age >= 15) and (age < RETIREMENTAGE)

            SINGLE: 1
            MARRIED: 2
            DIVORCED: 3
            WIDOW: 4
            ISSINGLE: civilstate == 1
            ISMARRIED: civilstate == 2
            ISDIVORCED: civilstate == 3
            ISWIDOW: civilstate == 4

            INWORK: 1
            UNEMPLOYED: 2
            STUDENT: 3
            RETIRED: 4
            OTHERINACTIVE: 5
            ISINWORK: workstate == 1
            ISUNEMPLOYED: workstate == 2
            ISSTUDENT: workstate == 3
            ISRETIRED: workstate == 4
            ISOTHERINACTIVE: workstate == 5

            LOWER_SECONDARY_EDU: 2
            UPPER_SECONDARY_EDU: 3
            TERTIARY_EDU: 4
            IS_LOWER_SECONDARY_EDU: education_level == 2
            IS_UPPER_SECONDARY_EDU: education_level == 3
            IS_TERTIARY_EDU: education_level == 4

        # possible transitions and regressions
        processes:
            ageing:
                - age: age + 1
                - agegroup_civilstate: if(age < 50,
                                          5 * trunc(age / 5),
                                          10 * trunc(age / 10))
                - agegroup_work: if(age < 70, 5 * trunc(age / 5), 70)

            birth:
                - to_give_birth: logit_regr(0.0,
                                            filter=ISFEMALE and (age >= 15) and (age <= 50),
                                            align='al_p_birth.csv')
                - new('person', filter=to_give_birth,
                      mother_id = id,
                      hh_id = hh_id,
                      partner_id = UNSET,
                      civilstate = SINGLE,
                      education_level = choice([LOWER_SECONDARY_EDU,
                                                UPPER_SECONDARY_EDU,
                                                TERTIARY_EDU],
                                               [0.25, 0.39, 0.36]),
                      workstate = STUDENT,
                      age = 0,
                      agegroup_work = 0,
                      agegroup_civilstate = 0,
                      gender = choice([MALE, FEMALE], [0.51, 0.49]))

            death:
                - dead: if(ISMALE,
                           logit_regr(0.0, align='al_p_dead_m.csv'),
                           logit_regr(0.0, align='al_p_dead_f.csv'))
                - mother_id: if(mother.dead, UNSET, mother_id)
                - partner_id: if(partner.dead, UNSET, partner_id)
                - civilstate: if(partner.dead, WIDOW, civilstate)
                - show('Avg age of dead men', avg(age, filter=dead and ISMALE))
                - show('Avg age of dead women', avg(age, filter=dead and ISFEMALE))
                - show('Widows', count(ISWIDOW))
                - remove(dead)

            marriage:
                - to_couple: if((age >= 18) and (age <= 90) and not ISMARRIED,
                                if(ISMALE,
                                   logit_regr(0.0, align='al_p_mmkt_m.csv'),
                                   logit_regr(0.0, align='al_p_mmkt_f.csv')),
                                False)
                - difficult_match: if(to_couple and ISFEMALE,
                                      abs(age - avg(age, filter=to_couple and ISMALE)),
                                      nan)
                # workaround because we can't use macros in combination with
                # the "other" special link yet
                - inwork: ISINWORK
                - partner_id: if(to_couple,
                                 matching(set1filter=ISFEMALE, set2filter=ISMALE,
                                          score=- 0.4893 * other.age
                                                + 0.0131 * other.age ** 2
                                                - 0.0001 * other.age ** 3
                                                + 0.0467 * (other.age - age)
                                                - 0.0189 * (other.age - age) ** 2
                                                + 0.0003 * (other.age - age) ** 3
                                                - 0.9087 * (other.inwork and not inwork)
                                                - 1.3286 * (not other.inwork and inwork)
                                                - 0.6549 * (other.inwork and inwork),
                                          orderby=difficult_match),
                                 partner_id)
                - justcoupled: to_couple and (partner_id != UNSET)
                - alone: household.get(persons.count() == 1)
                # create new households for newly wed women
                - needhousehold: ISFEMALE and justcoupled and not alone
                - in_mother_hh: hh_id == mother.hh_id
                - hh_id: if(needhousehold, new('household'), hh_id)
                # bring along their husband
                - hh_id: if(ISMALE and justcoupled, partner.hh_id, hh_id)
                # bring along their children
                - hh_id: if(mother.justcoupled and in_mother_hh,
                            mother.hh_id,
                            hh_id)

                - civilstate: if(justcoupled, MARRIED, civilstate)
                - dur_in_couple: if(justcoupled,
                                    0,
                                    if(ISMARRIED, dur_in_couple + 1, 0))

            get_a_life:
                - alone: household.get(persons.count() == 1)
                - hh_id: if(not ISMARRIED and not alone and (age >= 24),
                            new('household'),
                            hh_id)

            divorce:
                - agediff: if(ISFEMALE and ISMARRIED, age - partner.age, 0)
                - nb_children: household.get(persons.count(age < 18))
                # select females to divorce
                - divorce: logit_regr(0.6713593 * nb_children
                                      - 0.0785202 * dur_in_couple
                                      + 0.1429621 * agediff - 0.0088308 * agediff **2
                                      - 0.814204 * (ISINWORK and partner.get(ISINWORK))
                                      - 4.546278,
                                      filter = ISFEMALE and ISMARRIED and (dur_in_couple > 0),
                                      align = 'al_p_divorce.csv')
                # break link to partner
                - to_divorce: divorce or partner.divorce
                - partner_id: if(to_divorce, UNSET, partner_id)

                - civilstate: if(to_divorce, DIVORCED, civilstate)
                - dur_in_couple: if(to_divorce, 0, dur_in_couple)
                # move out males
                - hh_id: if(ISMALE and to_divorce,
                            new('household'),
                            hh_id)

            init_education_level:
                - education_level: choice([LOWER_SECONDARY_EDU,
                                           UPPER_SECONDARY_EDU,
                                           TERTIARY_EDU], [0.25, 0.39, 0.36])

            ineducation:
                # unemployed if left education
                - workstate: if(ISSTUDENT and
                                   (((age >= 16) and IS_LOWER_SECONDARY_EDU) or
                                    ((age >= 19) and IS_UPPER_SECONDARY_EDU) or
                                    ((age >= 24) and IS_TERTIARY_EDU)),
                                UNEMPLOYED,
                                workstate)
                - show('num students', sum(ISSTUDENT))

            inwork:
                # retire
                - workstate: if(age >= RETIREMENTAGE, RETIRED, workstate)
                
                - work_score: UNSET
                # men
                - work_score: if(ISMALE and ACTIVEAGE and ISINWORK,
                                 logit_score(-0.196599 * age + 0.0086552 * age **2 - 0.000988 * age **3
                                             + 0.1892796 * ISMARRIED + 3.554612),
                                 work_score)
                - work_score: if(ISMALE and ACTIVEAGE and (ISUNEMPLOYED or ISOTHERINACTIVE),
                                 logit_score(0.9780908 * age - 0.0261765 * age **2 + 0.000199 * age **3
                                             - 12.39108),
                                 work_score)
                # women
                - work_score: if(ISFEMALE and ACTIVEAGE and ISINWORK,
                                 logit_score(-0.2740483 * age + 0.0109883 * age **2 - 0.0001159 * age **3
                                             - 0.0906834 * ISMARRIED + 3.648706),
                                 work_score)
                - work_score: if(ISFEMALE and ACTIVEAGE and (ISUNEMPLOYED or ISOTHERINACTIVE),
                                 logit_score(0.8217638 * age - 0.0219761 * age **2 + 0.000166 * age **3
                                             - 0.5590975 * ISMARRIED - 10.48043),
                                 work_score)

                # this is equivalent, though less readable
#                - work_score: if(ACTIVEAGE,
#                                 if(ISINWORK,
#                                    if(ISMALE,
#                                       logit_score(-0.196599 * age + 0.0086552 * age **2 - 0.000988 * age **3
#                                                   + 0.1892796 * ISMARRIED + 3.554612),
#                                       logit_score(-0.2740483 * age + 0.0109883 * age **2 - 0.0001159 * age **3
#                                                   - 0.0906834 * ISMARRIED + 3.648706)),
#                                    if(ISUNEMPLOYED or ISOTHERINACTIVE,
#                                       if(ISMALE,
#                                          logit_score(0.9780908 * age - 0.0261765 * age **2 + 0.000199 * age **3
#                                                      - 12.39108),
#                                          logit_score(0.8217638 * age - 0.0219761 * age **2 + 0.000166 * age **3
#                                                      - 0.5590975 * ISMARRIED - 10.48043)),
#                                       UNSET)),
#                                 UNSET)

                - work: if(ACTIVEAGE,
                           if(ISMALE,
                              align(work_score, 'al_p_inwork_m.csv',
                                    leave=ISSTUDENT or ISRETIRED),
                              align(work_score, 'al_p_inwork_f.csv',
                                    leave=ISSTUDENT or ISRETIRED)),
                           False)
                - workstate: if(work, INWORK, workstate)

                # if not selected to work and last period in work set workstate
                # temporarily to UNSET
                - workstate: if(not work and lag(ISINWORK), UNSET, workstate)

                - show(groupby(workstate, lag(workstate)))
                - show('have job', count(work),
                       '(kept:', count(work and lag(ISINWORK)),
                       '/ new:', count(work and not lag(ISINWORK)), ')')
#                - csv(dump(id, agegroup_work, education_level,
#                           work_score, workstate, lag(workstate)))

            unemp_func:
                - unemp_score: UNSET
                # Male
                - unemp_condition_m: ISMALE and ACTIVEAGE and not ISINWORK
                # Probability of being unemployed from being unemployed previously
                - unemp_score: if(unemp_condition_m and lag(ISUNEMPLOYED),
                                  logit_score(- 0.1988979 * age + 0.0026222 * age **2
                                              - 0.4595076 * ISMARRIED
                                              + 5.096262),
                                  unemp_score)
                # Probability of being unemployed from being inwork previously
                - unemp_score: if(unemp_condition_m and lag(ISINWORK),
                                  logit_score(0.1396404 * age - 0.0024024 * age **2
                                              - 0.3957583 * ISMARRIED
                                              - 3.069904),
                                  unemp_score)
                # Female
                - unemp_condition_f: ISFEMALE and ACTIVEAGE and not ISINWORK
                # Probability of being unemployed from being unemployed previously
                - unemp_score: if(unemp_condition_f and lag(ISUNEMPLOYED),
                                  logit_score(- 0.1988979 * age + 0.0026222 * age **2
                                              - 0.4595076 * ISMARRIED
                                              + 5.096262),
                                  unemp_score)
                # Probability of being unemployed from being inwork previously
                - unemp_score: if(unemp_condition_f and lag(ISINWORK),
                                  logit_score(0.1122972 * age - 0.001672 * age **2
                                              - 0.4429804 * ISMARRIED
                                              - 2.585393),
                                  unemp_score)
                # Alignment of unemployment based on those not selected by inwork
                # Alignment files are constructed as follows:
                # [Number of unemployed / (Population - Number of Workers)] by age class
                # The here below condition must correspond to the here above denumerator
                - unemp: if(ACTIVEAGE and not ISINWORK,
                            if(ISMALE,
                               align(unemp_score, 'al_p_unemployed_m.csv',
                                     take=ISUNEMPLOYED and age >= 60,
                                     leave=ISSTUDENT or ISRETIRED),
                               align(unemp_score, 'al_p_unemployed_f.csv',
                                     take=ISUNEMPLOYED and age >= 60,
                                     leave=ISSTUDENT or ISRETIRED)),
                            False)
                - workstate: if(unemp, UNEMPLOYED, workstate)
                - workstate: if(workstate == UNSET, 
                                OTHERINACTIVE,
                                workstate)
                - show(groupby(workstate, lag(workstate)))

            civilstate_changes:
                - show(groupby(civilstate, lag(civilstate)))

            chart_demography:
                - bar(groupby(agegroup_civilstate, gender),
                      fname='demography_{period}.png')

            csv_output:
                - csv(groupby(agegroup_civilstate, gender),
                      fname='demography_{period}.csv')

                - csv(period,
                      avg(age, filter=ISMALE), avg(age, filter=ISFEMALE),
                      avg(age),
                      fname='average_age.csv', mode='a')
                - csv(period, count(not ACTIVEAGE) / count(ACTIVEAGE),
                      fname='dependency_ratio.csv', mode='a')

            init_reports:
                - csv('period', 'men', 'women', 'total',
                      fname='average_age.csv')
                - csv('period', 'ratio', fname='dependency_ratio.csv')
               
simulation:
    init:
        - household: [init_reports, csv_output]
        - person: [init_reports, csv_output, 
                   init_education_level, ineducation]

    processes:
        - person: [
            ageing,
            birth,
            death,
        ]
        - household: [clean_empty]
        - person: [
            marriage,
            get_a_life,
            divorce,
            ineducation,
            inwork,
            unemp_func
        ]
        # reporting
        - person: [
#            civilstate_changes,
#            chart_demography,
            csv_output
        ]
        - household: [csv_output]

    input:
        file: demo.h5
    output:
        path: output
        file: simulation.h5

    start_period: 2016
    periods: 2
    default_entity: person
